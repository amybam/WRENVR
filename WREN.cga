/**
 * File:    WREN.cga
 * Created: 16 Apr 2020 13:08:17 GMT
 * Author:  Kevin Huberty
 */

version "2019.1"

# ----------------------------------------
# Attributes
# ----------------------------------------

@Group("Display")
    @Order(1)
        attr ShowFacade = true
    @Order(2)
        attr ShowFloors = false
    @Order(3)
        @Range(min=1,max=5,restricted=true)
        attr Style = 1

@Group("Floors")
    
    @Order(1)
        @Range(min=5, max=80, restricted=false)
        attr overallHeight = 24
        # Extrusion height for lot based generation.
    @Order(2)
        @Range(min=0, max=1, restricted=false)
        attr foundationHeight = 0.01
    @Order(3)
        @Range(min=3, max=7, restricted=false)
        attr groundfloorHeight = 5.5
    @Order(4)
        @Range(min=3, max=7, restricted=false)
        attr floorHeight = 5.5
    @Order(5)
        @Range(min=3. max=7, restricted=false)
        attr topfloorHeight = 5.5


@Group("Bays")

    @Order(1)
        @Range(min=2, max=5, restricted=false)
        attr tileWidth = 3.1
    @Order(2)
        @Range(min=1, max=3, restricted=false)
        attr windowWidth = 1.4
    @Order(3)
        @Range(min=1,max=3, restricted=false)
        attr doorWidth = 2.1

@Group("Colors")
    
    @Order(1)
        @Color
        attr wallColor = "#ffffff"


# ----------------------------------------
# Constants
# ----------------------------------------


#Geometries

#Palazzo
const palazzowindowAsset = "facades/palazzo/elem_window_frame.obj"
const palazzoroundwindowtopAsset = "facades/palazzo/elem_window_roundtop.obj"
const palazzotrianglewindowtopAsset = "facades/palazzo/elem_window_triangletop.obj"
const palazzohalfarchAsset = "facades/palazzo/elem_facade_halfarch.obj"
const palazzoledgeAsset = "facades/palazzo/elem_facade_ledge.obj"
const palazzomodillionAsset = "facades/palazzo/elem_facade_modillion.obj"


const wallInset = 0.4


# ----------------------------------------
# Start Rules
# ----------------------------------------

@StartRule @InMesh
Mass -->
    alignScopeToAxes(y)
	cleanupGeometry(edges, 0.5)

@StartRule
Lot -->
    extrude(overallHeight)

    [case Style==1: BuildingSplit else: NIL]
	[case Style==2: BuildingSplitPalazzo else: NIL]


# ----------------------------------------
# Functions
# ----------------------------------------


BuildingSplitFacade -->
    comp(f) {bottom: NIL | all=BuildingSplitShell}

BuildingSplitShell -->
    alignScopeToAxes(y)
    [case Style==1: BuildingSplit else: NIL]
	[case Style==2: BuildingSplitPalazzo else: NIL]

BuildingSplit -->
    comp(f) { front : FrontFacade | side : SideFacade}

BuildingSplitPalazzo -->
    comp(f) { front : FrontFacadePalazzo | side : SideFacadePalazzo}

FrontFacadePalazzo -->
    setupProjection(0, scope.xy, 1.5, 1, 0, 0, 1)
	setupProjection(2, scope.xy, scope.sx, scope.sy)
	split(y){foundationHeight    : Foundation 
            |groundfloorHeight   : FloorPalazzo(split.index)
            |floorHeight         : FloorPalazzo(split.index)
            |floorHeight         : FloorPalazzo(split.index)
            |{~floorHeight       : FloorPalazzo(split.index)}*
            |topfloorHeight      : FloorPalazzo(999)
            |0.5                 : s('1,'1,0.3) palazzoledgeAsset}

SideFacadePalazzo -->
    setupProjection(0, scope.xy, 1.5, 1, 0, 0, 1)
	setupProjection(2, scope.xy, scope.sx, scope.sy)
	split(y){Foundation_Height    : Foundation 
            |Ground_Floor_Height  : FloorPalazzo(split.index)
            |Upper_Floor_Height   : FloorPalazzo(split.index)
            |Upper_Floor_Height   : FloorPalazzo(split.index)
            |{~Upper_Floor_Height : FloorPalazzo(split.index)}*
            |Upper_Floor_Height   : FloorPalazzo(999)
            |0.5                  : s('1,'1,0.3) palazzoledgeAsset}

FloorPalazzo(floorIndex) -->
    case floorIndex == 0 :
        SubFloorPalazzo(floorIndex)
    case floorIndex == 2 :
        split(y){~1   : SubFloorPalazzo(floorIndex) BalconyPalazzo
                | 0.5 : TopLedgePalazzp}
    else                 :
        split(y){1 : BottomLedgePalazzo(floorIndex) | ~1 : SubFloorPalazzo(floorIndex) | 0.5 : TopLedgePalazzo}
    

# ----------------------------------------
# Tiles
# ----------------------------------------

SubFloorPalazzo(floorIndex) -->
    split(x){0.5         : WallPalazzo(1)
            |{~tileWidth : TilePalazzo(floorIndex) }* 
			| 0.5        : WallPalazzo(1) }

TilePalazzo(floorIndex) -->
	case floorIndex == 0:
		split(x){ ~1         : SolidWallPalazzo
			    | doorWidth  : DoorTilePalazzo
			    | ~1         : SolidWallPalazzo }		 
	else: 	
		split(x){ ~1           : WallPalazzo(getWalltypePalazzo(floorIndex))
			    | windowWidth  : WindowTilePalazzo(floorIndex)
			    | ~1           : WallPalazzo(getWalltypePalazzo(floorIndex)) }		



# ----------------------------------------
# Windows
# ----------------------------------------


WindowTilePalazzo(floorIndex) -->
	case floorIndex == 1 || floorIndex == 999 : WindowPalazzo
	case floorIndex == 2 : WindowPalazzo t(0,'1,0) WindowOrnamentRound
	else : WindowPalazzo WindowLedgePalazzo t(0,'1,0) WindowOrnamentTriangle
	
WindowOrnamentTriangle --> 
	s('1.7, 1.2, 0.3) center(x) i(palazzotrianglewindowtopAsset) WallPalazzo(0)

WindowOrnamentRound -->
	s('1.7, 1.2, 0.4) center(x) i(palazzoroundwindowtopAsset) WallPallazo(0)
	split(x){~1            : WindowModillion 
            | window_width : NIL 
            | ~1           : WindowModillion}

	
WindowModillion -->
	s(0.2,'1.3,'0.6) t(0,'-1,0) center(x) i(palazzomodillionAsset) WallPallazo(0)

WindowLedgePalazzo -->
	s('1.5, 0.2, 0.1) t(0,-0.2,0) center(x) primitiveCube() WallPallazo(0)
	
WindowPalazzo -->
	s('1,'1,0.2) t(0,0,-0.2)
	t(0,0,0.02)
	[ i(palazzowindowAsset) WallPallazo(0) ]
	Glass
	
# ----------------------------------------
# Door
# ----------------------------------------


DoorTilePalazzo -->
	split(y){~1          : Door 
            | scope.sx/2 : Arcs 
            | 0.5        : Arctop}

Arctop -->
	WallPallazo(1)
	s(0.5,'1,0.3) center(x) i(palazzomodillionAsset) WallPallazo(1)

# 
Arcs -->  
	s('1,'1,wallInset) t(0,0,-wallInset)
	Doortop 
	primitiveCube()
	split(x){ ~1 : ArcAsset 
			| ~1 : r(scopeCenter,0,0,-90) ArcAsset}

Doortop -->
	WallPallazo(0)

ArcAsset --> i(palazzohalfarchAsset) WallPallazo(1)

Door -->
	t(0,0,-wall_inset) WallPallazo(0)
	

# ----------------------------------------
# Ledges
# ----------------------------------------

TopLedge --> WallStripe 

BottomLedgePalazzo(floorIndex) -->

	case floorIndex == 1 : split(y){~1 : WallPallazo(0) 
                                   |~1 : s('1,'1,0.2) LedgeAsset}
	case floorIndex == 999 : split(y){~1 : WallStripe 
                                     | ~1 : s('1,'1,0.2) LedgeAsset}
	else : WallStripe

WallStripe --> 
    split(x){ 0.5 : WallPallazo(1) 
            | ~1  : WallPallazo(2) 
            | 0.5 : WallPallazo(1) } 

LedgeAsset --> i(palazzoledgeAsset) WallPallazo(0)


# ----------------------------------------
# Balcony
# ----------------------------------------

Balcony --> 
	s('1,2,1) t(0,-0.3,0) primitiveCube() 
	split(y){0.2 : BalconyBeams 
			|0.3 : BalconyFloor 
			|1   : RailingBox }

BalconyBeams -->			
	split(x){ ~0.4 : s(0.2,'1,'0.9) center(x)  WallPallazo(0) }*

RailingBox -->
	comp(f){front : Rail 
           | left : Rail 
           | right : Rail}

Rail --> 
	 s('1.1,'1,0.1) t(0,0,-0.1) center(x) primitiveCube() WallPallazo(0)

BalconyFloor --> WallPallazo(0)

# ----------------------------------------
# Wall
# ----------------------------------------


getWalltypePalazzo(floorIndex) = 
	case floorIndex == 0 : 1
	case floorIndex == 1 : 1
	else : 2

WallPallazo(walltype) -->
	// dark bricks with dirt
	case walltype == 1 :
		color(wallColor)
	// bright bricks with dirt	
	case walltype == 2 :
		color(wallColor)
	// dirt only	
	else :
		color(wallColor)

SolidWallPalazzo -->
		s('1,'1,wall_inset) t(0,0,-wall_inset)
		primitiveCube()
		WallPallazo(1)